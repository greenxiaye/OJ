let n = '3'
let input = "0 1 0"
function solve(n, input) {
    let arr = input.split(' ').map(Number)
    let pre = arr[0]
    let cnt = 1
    for (let i = 1; i < arr.length; i++) {
        //找序列中的交错，反转一次就cnt++
        if (arr[i] != pre) {
            cnt++
            pre = arr[i]
        }
    }
    console.log(cnt)
}
solve(n, input)


// 描述
// 我们定义一个由数字 0 和 1 组成的序列是交错序列，当且仅当在这个序列中 0 和 1 是轮流 出现的，比如，0，010，10101 都是交错序列。
// 现在给出了一个由数字 0 和 1 组成的序列𝐴，它可能不是一个交错序列，但是你可以从这个 序列中选择一些数字出来，按他们在序列𝐴中原有的相对顺序排列(即选取𝐴的一个子序列)， 使得你最后得到的是一个交错序列。问这样能得到的交错序列的最长长度是多少。

// 数据范围：  ，序列中只包含 0 和 1。
// 输入描述：
// 第一行包含一个整数𝑛，表示输入序列的长度。
// 第二行包含 𝑛 个 0 或 1，表示对应的序列。
                